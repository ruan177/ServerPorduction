// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(uuid())
  username          String
  email             String        @unique
  password          String
  profileImageUrl   String        @default("")
  token             RefreshToken?
  attemptsLeft      Int           @default(5)
  resetAccountCode  String?
  lastTryRecAccount DateTime?
  isAdmin           Boolean       @default(false)
  created_courses   Course[]
  savedCourses      SavedCourse[]
  votes             Vote[]

  @@map("users")
}

model Course {
  id          String        @id @default(uuid())
  name        String        @unique
  description String
  author_id   String
  isAproved   Boolean       @default(false)
  author      User          @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  body        String        @db.Text
  savedUsers  SavedCourse[]
  votes       Vote[]

  @@unique([id, author_id])
  @@map("courses")
}

model SavedCourse {
  id        String @id @default(uuid())
  user_id   String
  course_id String
  user      User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course    Course @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([user_id, course_id])
  @@map("savedCourses")
}

model RefreshToken {
  id        String @id @default(uuid())
  expiresIn String
  user_id   String @unique
  user      User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("refreshToken")
}

model Vote {
  id        String @id @default(uuid())
  user_id   String
  course_id String
  value     Int // Pode ser 1 para upvote, -1 para downvote, 0 para neutro, etc.
  user      User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  course    Course @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([user_id, course_id])
  @@map("votes")
}
